<%- include("templates/header") %>

<!-- Add custom CSS for background image and text -->
<style>
  body {
    background-image: url('/img/background.jpg');
    background-size: cover;
    background-position: center;
  }

  .content-wrapper {
    background-color: rgba(255, 255, 255, 0.8);
    padding: 10px;
    border-radius: 15px;
    margin: 10px;
  }

  /* h1 {
    font-size: 2rem;
    font-weight: 700;
  } */

  h2 {
    font-weight: 700;
  }

  ol li {
    margin-bottom: 10px;
  }
</style>

<div id="loading-spinner" style="display: none;">
  <div class="spinner-border text-primary" role="status">
    <span class="visually-hidden">Loading...</span>
  </div>
  <!-- Add your loading spinner markup here, e.g., an animated GIF or an SVG spinner -->
</div>
<!-- Add this inside the head tag or right before the closing body tag -->
<script src="/path/to/spinner.js"></script>

<div class="container mt-4">
  <% if (bookmarks.length > 0) { %>
    <% for (let bookmark of bookmarks) { %>
      <div class="content-wrapper">
        <h3 class="mb-1"><b><a href="<%= bookmark.url %>"><%= bookmark.title %></a></b></h3>
        <!-- <p><%= bookmark.instructions %></p>
        <p><%= bookmark.isBookmarked ? 'Bookmarked' : 'Not bookmarked' %></p> -->
      </div>
    <% } %>
  <% } else { %>
    <p>No bookmarks found.</p>
  <% } %>
</div>
<%- include("templates/footer") %>

<script>
  const bookmarkLinks = document.querySelectorAll('.bookmark-link');
  bookmarkLinks.forEach(link => {
    const bookmarkId = link.dataset.bookmarkId;
    const isBookmarked = link.classList.contains('bookmarked');
    const bookmarkIcon = link.querySelector('svg');
    const bookmarkIconPath = bookmarkIcon.querySelector('path');
    
    if (isBookmarked) {
      bookmarkIconPath.setAttribute('fill', 'red');
    }

    link.addEventListener('click', async (event) => {
      event.preventDefault();
      
      // Toggle the bookmarked class and update the icon color
      link.classList.toggle('bookmarked');
      bookmarkIconPath.setAttribute('fill', link.classList.contains('bookmarked') ? 'red' : 'currentColor');

      // Send a request to the server to add or remove the bookmark
      const response = await fetch(link.classList.contains('bookmarked') ? '/bookmarks/add' : '/bookmarks/remove', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          bookmarkId: bookmarkId
        }),
      });

      if (!response.ok) {
        console.error('Failed to update bookmark status');
      }
    });
  });
</script>


